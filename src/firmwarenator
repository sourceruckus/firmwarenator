#!/bin/bash
#
# Firmwarenator - a magical machine-specific fw.img creator
#
# Copyright 2021-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for creating a fw.img file containing all the
# firmware required for the host system.
#
# NOTE: This depends on having the "Loading firmware from %s" printout enabled
#       in the kernel (e.g., adding "dyndbg="func fw_get_filesystem_firmware
#       +fmp" to kernel commandline) and the kernel ring buffer being fresh
#       enough to still have that output available.
#
#       And that all depends on you already having a bootable system w/ an
#       uptodate /lib/firmware directory, at least temporarily.
#


# assume we're in the source tree if $PWD/firmwarenator.sh.in exists
if [ -f $(dirname $0)/firmwarenator.sh.in ]; then
    LIBDIR=$(realpath $(dirname $0))
    CONFDIR=$LIBDIR
else
    LIBDIR=__LIBDIR__
    CONFDIR=__CONFDIR__
fi
. $LIBDIR/firmwarenator.sh
[ -f $CONFDIR/firmwarenator.conf ] && . $CONFDIR/firmwarenator.conf
[ -f ~/.firmwarenator.conf ] && . ~/.firmwarenator.conf


decho()
{
    if [ -n "$verbose" ]; then
        echo "$*"
    fi
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "$(basename $0) - a magical machine-specific fw.img creator."
    echo "Copyright (C) 2021-2022 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "usage: `basename $0` IMGNAME"
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -V, --version             Show version string and exit."
    echo
    echo "  -v, --verbose             Display extra output"
    echo
    echo "  -c, --compressor COMP     Use COMP compressor in pipeline during archive"
    echo "                            creation.  Valid compressors are 'gzip', 'bzip2',"
    echo "                            'xz', 'zstd', or 'none'.  Default is 'zstd' w/"
    echo "                            --compressor-args of -T0 -10.  If COMP is specified"
    echo "                            as 'none', no compressor is used."
    echo
    echo "  -C, --compressor-args ARGS  Pass ARGS into the specified compressor.  If"
    echo "                              --compressor was specified, defaults to empty"
    echo "                              string.  Otherwise, default is '-T0 -10' to go"
    echo "                              along with the default zstd compressor.  Can be"
    echo "                              provided multiple times, causing argurments to be"
    echo "                              appended (i.e., becaue you cannot have spaces in"
    echo "                              ARGS)."
    echo
    echo "  -s, --sqsh                Instead of building a cpio archive suitable for"
    echo "                            appending to initrd, build a squashfs image.  This"
    echo "                            can be used by the initrd to supply firmware during"
    echo "                            the early stages of boot.  It's arguably better"
    echo "                            than the cpio method (assuming you're using an"
    echo "                            initrd generated using ruckusrd), because you don't"
    echo "                            have to recreate your initrd after updating"
    echo "                            fw.sqsh."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hVvc:C:s \
    --long help,version,verbose,compressor:,compressor-args:,sqsh -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
if [ -n "$DEFAULT_COMPRESSOR" ]; then
    compressor=$DEFAULT_COMPRESSOR
else
    compressor="zstd"
fi
verbose=
use_sqsh=


# parse the new positional arguments
while true; do
    case "$1" in
        -V|--version)
            echo "Firmwarenator $VERSION"
            exit 0
            ;;
        -v|--verbose)
            verbose=yes
            shift
            ;;
	-c|--compressor)
            compressor=$2
            shift 2
            ;;
        -C|--compressor-args)
            # empty compargs if this is the first -C arg
            if [ -z "$compargs_set" ]; then
                compargs=$2
                compargs_set=y
            else
                compargs+=" $2"
            fi
            shift 2
            ;;
        -s|--sqsh)
            use_sqsh=y
            shift
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
filename=$(realpath $1)

# check for required options
if [ -z "$filename" ]; then
    usage "IMGNAME required"
    exit 1
fi

# figure out compressor settings
__comp=\$${compressor^^}_COMP
comp=`eval echo $__comp`
if [ -z "$compargs_set" ]; then
    __compargs=\$${compressor^^}_COMP_ARGS
    compargs=`eval echo $__compargs`
fi
__decomp=\$${compressor^^}_DECOMP
decomp=`eval echo $__decomp`
# make sure supplied compressor has settings in config file
if [ -z "$comp" -o -z "$decomp" ]; then
    usage "invalid compressor specified: $compressor - not in config file"
    exit 1
fi
# make sure system actually has configured compressor available
if [ ! -x "`which $comp`" -o ! -x "`which $decomp`" ]; then
    usage "specificed compressor missing utilities: $compressor"
    exit 1
fi

decho filename: $filename
decho verbose: $verbose
decho comp: $comp
decho compargs: $compargs
decho use_sqsh: $use_sqsh

tmpdir=$(mktemp -dt $(basename $0)-XXXX)
decho tmpdir: $tmpdir

cd $tmpdir
dmesg | awk '/Loading firmware/ {print $NF}'| cpio -p --make-dir .
if [ -n "$verbose" ]; then
    cpio="cpio --verbose"
else
    cpio="cpio"
fi

if [ -n "$use_sqsh" ] ; then
    mksquashfs . $filename -comp xz -e .git -noappend
else
    find . | $cpio -o -H newc | $comp $compargs > $filename
fi

rm -rf $tmpdir

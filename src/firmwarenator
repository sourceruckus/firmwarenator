#!/bin/bash
#
# Firmwarenator - a magical machine-specific fw.img creator
#
# Copyright 2021-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for creating a fw.img file containing all the
# firmware required for the host system.


# assume we're in the source tree if $PWD/firmwarenator.sh.in exists
if [ -f $(dirname $0)/firmwarenator.sh.in ]; then
    LIBDIR=$(realpath $(dirname $0))
    CONFDIR=$LIBDIR
else
    LIBDIR=__LIBDIR__
    CONFDIR=__CONFDIR__
fi
. $LIBDIR/firmwarenator.sh
[ -f $CONFDIR/firmwarenator.conf ] && . $CONFDIR/firmwarenator.conf
[ -f ~/.firmwarenator.conf ] && . ~/.firmwarenator.conf


decho()
{
    if [ -n "$verbose" ]; then
        echo "$*"
    fi
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "$(basename $0) - a magical machine-specific fw.img creator."
    echo "Copyright (C) 2021-2022 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "Firmwarenator is a utility for creating a fw.img file containing all the"
    echo "firmware required for the host system."
    echo
    echo "NOTE: This depends on having the \"Loading firmware from %s\" printout enabled"
    echo "      in the kernel (e.g., add \"dyndbg='func fw_get_filesystem_firmware +fmp'\""
    echo "      to kernel commandline) and the kernel ring buffer being fresh enough to"
    echo "      still have that output available."
    echo
    echo "      And that all depends on already having a bootable system w/ an uptodate"
    echo "      /lib/firmware directory, at least temporarily."
    echo
    echo "usage: `basename $0` IMGNAME"
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -V, --version             Show version string and exit."
    echo
    echo "  -v, --verbose             Display extra output"
    echo
    echo "  -f, --force               Force overwrite existing file."
    echo
    echo "  -c, --compressor COMP     Use COMP compressor in pipeline during archive"
    echo "                            creation.  Valid compressors are 'gzip', 'bzip2',"
    echo "                            'xz', 'zstd', or 'none'.  Default is 'zstd' w/"
    echo "                            --compressor-args of -T0 -10.  If COMP is specified"
    echo "                            as 'none', no compressor is used."
    echo
    echo "  -C, --compressor-args ARGS  Pass ARGS into the specified compressor.  If"
    echo "                              --compressor was specified, defaults to empty"
    echo "                              string.  Otherwise, default is '-T0 -10' to go"
    echo "                              along with the default zstd compressor.  Can be"
    echo "                              provided multiple times, causing argurments to be"
    echo "                              appended (i.e., becaue you cannot have spaces in"
    echo "                              ARGS)."
    echo
    echo "  -s, --sqsh                Instead of building a cpio archive suitable for"
    echo "                            appending to initrd, build a squashfs image.  This"
    echo "                            can be used by the initrd to supply firmware during"
    echo "                            the early stages of boot.  It's arguably better"
    echo "                            than the cpio method (assuming you're using an"
    echo "                            initrd generated using ruckusrd), because you don't"
    echo "                            have to recreate your initrd after updating"
    echo "                            fw.sqsh."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hVvfc:C:s \
    --long help,version,verbose,force,compressor:,compressor-args:,sqsh -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
if [ -n "$DEFAULT_COMPRESSOR" ]; then
    compressor=$DEFAULT_COMPRESSOR
else
    compressor="zstd"
fi
verbose=
allow_overwrite=
use_sqsh=


# parse the new positional arguments
while true; do
    case "$1" in
        -V|--version)
            echo "Firmwarenator $VERSION"
            exit 0
            ;;
        -v|--verbose)
            verbose=yes
            shift
            ;;
        -f|--force)
            allow_overwrite=yes
            shift
            ;;
	-c|--compressor)
            compressor=$2
            shift 2
            ;;
        -C|--compressor-args)
            # empty compargs if this is the first -C arg
            if [ -z "$compargs_set" ]; then
                compargs=$2
                compargs_set=y
            else
                # NOTE: not using += to keep busybox ash happy
                compargs="$compargs $2"
            fi
            shift 2
            ;;
        -s|--sqsh)
            use_sqsh=y
            shift
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
# FIXME: oh dear... busybox realpath returns error if file doesn't exist,
#        unlike the regular realpath...  :-( wait, it only does that if the
#        file has no path segments...  `realpath FOO` is an error, but
#        `realpath ./FOO` works fine.  That's a bug in bb 1.37.0, should check
#        for a fix
#
filename=$(realpath $1)

# check for required options
if [ -z "$filename" ]; then
    usage "IMGNAME required"
    exit 1
fi

# check for existing file
if [ -e "$filename" -a -z "$allow_overwrite" ]; then
    echo "Image $filename already exists.  Use -f to overwrite."
    exit 1
fi

# figure out compressor settings
#
# NOTE: not using ${compressor^^} to keep busybox ash happy
#
__comp=\$$(echo $compressor | tr '[a-z]' '[A-Z]')_COMP
comp=`eval echo $__comp`
if [ -z "$compargs_set" ]; then
    __compargs=\$$(echo $compressor | tr '[a-z]' '[A-Z]')_COMP_ARGS
    compargs=`eval echo $__compargs`
fi
__decomp=\$$(echo $compressor | tr '[a-z]' '[A-Z]')_DECOMP
decomp=`eval echo $__decomp`
# make sure supplied compressor has settings in config file
if [ -z "$comp" -o -z "$decomp" ]; then
    usage "invalid compressor specified: $compressor - not in config file"
    exit 1
fi
# make sure system actually has configured compressor available
if [ ! -x "`which $comp`" -o ! -x "`which $decomp`" ]; then
    usage "specificed compressor missing utilities: $compressor"
    exit 1
fi

decho filename: $filename
decho verbose: $verbose
decho comp: $comp
decho compargs: $compargs
decho use_sqsh: $use_sqsh
decho allow_overwrite: $allow_overwrite

tmpdir=$(mktemp -dt $(basename $0)-XXXXXX)
decho tmpdir: $tmpdir

cd $tmpdir
# make sure we at least have an empty lib/firmware directory
mkdir -p lib/firmware
dmesg | awk '/Loading firmware/ {print $NF}'| cpio -p -d .
if [ -n "$verbose" ]; then
    cpio="cpio --verbose"
else
    cpio="cpio"
fi

# remove potentially existing filename
#
# NOTE: We make sure that either the file doesn't exist or we have explicit
#       permission to overwrite it during argument parsing.
#
rm -f $filename

if [ -n "$use_sqsh" ] ; then
    # FIXME: could use zstd for compressor, but then we have to make sure host
    #        system supports it (Ubuntu 18.04 didn't), and that's probably not
    #        worth the hassle considering that our fw.sqsh is already going to
    #        be tiny.
    #
    # FIXME: oops, archive layout needs to be different for fw.sqsh. no
    #        lib/firmware path segment, contents of firmware just go right in
    #        the root of the filesystem.
    #
    # NOTE: You can't just assume -noappend will remove previously existing
    #       image.  If there exists a malformed .sqsh (or one written with
    #       options unsupported by this version of mksquashfs), it will refuse.
    #
    mksquashfs lib/firmware $filename -comp xz -e .git -noappend || exit 1
else
    find . | $cpio -o -H newc | $comp $compargs > $filename
fi

rm -rf $tmpdir
